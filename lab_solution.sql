USE sakila;
-- Write SQL queries to perform the following tasks using the Sakila database:
-- List the number of films per category.
SELECT c.name AS category_name, COUNT(fc.film_id) AS film_count
FROM category AS c
JOIN film_category AS fc ON c.category_id = fc.category_id 
GROUP BY c.name;

-- Retrieve the store ID, city, and country for each store.
SELECT s.store_id AS store_id, ci.city AS city , co.country AS country_
FROM store AS s
JOIN address AS a ON s.address_id = a.address_id
JOIN city AS ci ON ci.city_id = a.city_id
JOIN country AS co on co.country_id = ci.country_id
ORDER BY store_id;

-- Calculate the total revenue generated by each store in dollars.
SELECT s.store_id AS store, SUM(p.amount) AS total_revenue
FROM store AS s
JOIN staff AS st ON st.store_id = s.store_id
JOIN payment AS p ON p.staff_id = st.staff_id
GROUP BY s.store_id
ORDER BY store;

-- Determine the average running time of films for each category.
SELECT AVG(f.length) AS avg_running_time, c.name AS category_name
FROM film AS f
JOIN film_category AS fc ON fc.film_id = f.film_id
JOIN category AS c on c.category_id = fc.category_id
GROUP BY category_name;

-- Identify the film categories with the longest average running time.
SELECT ROUND(AVG(f.length),2) AS avg_running_time, c.name AS category_name
FROM film AS f
JOIN film_category AS fc ON fc.film_id = f.film_id
JOIN category AS c on c.category_id = fc.category_id
GROUP BY category_name
ORDER BY avg_running_time DESC
LIMIT 5;

-- Display the top 10 most frequently rented movies in descending order.
SELECT f.title AS movie_title, COUNT(r.rental_id) AS rental_id
FROM film AS f
JOIN inventory AS i ON i.film_id = f.film_id
JOIN rental AS r ON r.inventory_id = i.inventory_id
GROUP BY movie_title 
ORDER BY rental_id DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT * FROM film;

SELECT film_id, title FROM film
WHERE title = "Academy Dinosaur";

SELECT inventory_id, film_id, store_id
FROM inventory 
WHERE film_id = 1 AND store_id = 1;

SELECT i.inventory_id, i.film_id, i.store_id
FROM inventory AS i
LEFT JOIN rental AS r ON i.inventory_id = r.inventory_id
AND return_date IS NULL
WHERE film_id = 1 AND store_id = 1 AND return_date IS NULL;


-- Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT DISTINCT(f.title),
 CASE 
    WHEN COUNT(CASE WHEN r.return_date IS NULL THEN 1 END) = COUNT(r.rental_id)
         THEN 'NOT available'
    ELSE 'Available'
  END AS availability
FROM film AS f
JOIN inventory AS i ON i.film_id = f.film_id
LEFT JOIN rental AS r ON r.inventory_id = i.inventory_id 
GROUP BY f.film_id, f.title;

